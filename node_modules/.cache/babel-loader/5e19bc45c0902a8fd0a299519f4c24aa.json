{"ast":null,"code":"var _jsxFileName = \"/srv/git/websocket/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { w3cwebsocket } from 'websocket';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timeout = 250;\n\n    this.connect = () => {\n      const ws = new w3cwebsocket('ws://172.28.2.130:3001', 'echo-protocol');\n      let that = this; // cache the this\n\n      let connectInterval;\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          ws: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        console.log('start onMessage');\n        const message = evt.data;\n        this.setState({\n          messageLog: this.state.messageLog + message\n        });\n        console.log(message);\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n    };\n\n    this.check = () => {\n      const {\n        ws\n      } = this.state;\n      if (!ws || ws.readyState == WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.sendMessage = () => {\n      try {\n        const userName = document.getElementById('username').value;\n        const message = document.getElementById('text').value;\n        document.getElementById('text').value = '';\n        console.log(message);\n        this.state.ws.send(`${userName}: ${message}\\r\\n`); //send data to the server\n      } catch (error) {\n        console.log(error); // catch error\n      }\n    };\n\n    this.state = {\n      ws: null,\n      messageLog: ''\n    };\n  }\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \"Username: \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, \"Message: \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 22\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        height: '30px',\n        width: '60px',\n        backgroundColor: 'red',\n        color: 'white'\n      },\n      onClick: () => this.sendMessage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, \"Send\")), /*#__PURE__*/React.createElement(\"textarea\", {\n      style: {\n        height: '400px',\n        width: '600px'\n      },\n      id: \"textarea\",\n      value: this.state.messageLog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/srv/git/websocket/src/App.js"],"names":["React","w3cwebsocket","App","Component","constructor","props","timeout","connect","ws","that","connectInterval","onopen","console","log","setState","clearTimeout","onmessage","evt","message","data","messageLog","state","onclose","e","Math","min","reason","setTimeout","check","onerror","err","error","close","readyState","WebSocket","CLOSED","sendMessage","userName","document","getElementById","value","send","componentDidMount","render","logo","height","width","backgroundColor","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { w3cwebsocket } from 'websocket';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        ws: null,\n        messageLog: ''\n    };\n  }\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  timeout = 250;\n\n  connect = () => {\n    const ws = new w3cwebsocket('ws://172.28.2.130:3001', 'echo-protocol');\n    let that = this; // cache the this\n    let connectInterval;\n\n    ws.onopen = () => {\n      console.log(\"connected websocket main component\");\n\n      this.setState({ ws: ws });\n\n      that.timeout = 250; // reset timer to 250 on open of websocket connection \n      clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n    };\n\n    ws.onmessage = evt => {\n      // listen to data sent from the websocket server\n      console.log('start onMessage')\n      const message = evt.data\n      this.setState({messageLog: this.state.messageLog + message})\n      console.log(message)\n    }\n\n    // websocket onclose event listener\n    ws.onclose = e => {\n        console.log(\n            `Socket is closed. Reconnect will be attempted in ${Math.min(\n                10000 / 1000,\n                (that.timeout + that.timeout) / 1000\n            )} second.`,\n            e.reason\n        );\n\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n    };\n\n    // websocket onerror event listener\n    ws.onerror = err => {\n        console.error(\n            \"Socket encountered error: \",\n            err.message,\n            \"Closing socket\"\n        );\n\n        ws.close();\n    };\n  }\n\n  check = () => {\n    const { ws } = this.state;\n    if (!ws || ws.readyState == WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n  };\n\n  sendMessage = () => {\n    try {\n        const userName = document.getElementById('username').value;\n        const message = document.getElementById('text').value;\n        document.getElementById('text').value = '';\n        console.log(message)\n        this.state.ws.send(`${userName}: ${message}\\r\\n`) //send data to the server\n    } catch (error) {\n        console.log(error) // catch error\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className='input'>\n            Username: <input id='username'></input>\n          </div>\n          <div className='input'>\n            Message: <input id='text'></input>\n          </div>\n          <div className='input'>\n            <button style={{height: '30px', width: '60px', backgroundColor: 'red', color: 'white'}} onClick={() => this.sendMessage()}>Send</button>\n          </div>\n          <textarea style={{height:'400px', width:'600px'}} id='textarea' value={this.state.messageLog}>\n\n          </textarea>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}